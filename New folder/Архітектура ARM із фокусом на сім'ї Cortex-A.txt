Архітектура ARM або Advanced RISC Machine стала однією з найбільш використовуваних комп'ютерних архітектур у світі через своє низьке енергоспоживання, високу продуктивність у роботі з невеликими та численними завданнями одночасно, низькі витрати та маленький розмір. Вона широко використовується в смартфонах, планшетах, мікрокомп'ютерах та вбудованих системах. ARM стала потужною альтернативою суперкомп'ютерам, необхідним для дата-центрів, оскільки це енергоефективне рішення.

Мотивація:

Якщо ми подивимося навколо, ми побачимо, що процесори ARM скрізь. Вони завжди з нами. Проте справжня мотивація полягає в тому, що процесори ARM - це майбутнє технології. Світ рухається до зеленої та чистої технології. Технології, яка має високу продуктивність, але в той же час поважає навколишнє середовище. Ці дві риси - основна мета за процесорами ARM. Крім того, вони широко використовуються в Інтернеті речей, що росте і змінює погляд світу на технології. І однією з ростущих застосувань ІР - це розумний будинок. Таким чином, мотивація вивчати архітектуру ARM може бути розглянута як особиста для розвитку власних проектів або глобальна для збереження планети.

Розвиток архітектури ARM

Огляд історії ARM:

Походження архітектури ARM виникло від британської технологічної компанії Acorn Computers, яка розробила ARM або Acorn RISC Machine в 1980-х роках. Це було результатом успіху між Acorn Computers та British Broadcasting Corporation. Перша версія ARM була ARM1, випущена в 1985 році. Після цього ARM Holdings перетворила його в Advanced RISC Machine. ARM Holdings - британська компанія, заснована в 1990 році. Вона не виробляє процесори сама. Замість цього вона розробляє мультиядерні архітектури та мікропроцесори.

Дорожня карта розвитку:

ARM має кілька сімей, залежно від версії ARM від ARMv1 до ARMv8-A. Різниця в версіях може залежати від продуктивності, сфери використання або іноді від виробника, оскільки, як зазначалося раніше, ARM Holdings не виробляє процесори, але вони розробляють їхній дизайн та архітектуру та надають ліцензію на виробництво компаніям, таким як Snapdragon і Qualcomm. Наприклад, сімейства Cortex-M/R/A (32-біт) входять в сім'ю ARMv7. У цьому виступі ми сфокусуємося на сім'ї Cortex-A/A50.

Профілі архітектури ARM

У архітектурі ARM є три основні профілі. Вони відрізняються за застосуванням архітектури в реальному житті. По-перше, профіль застосування, який реалізований в ARMv7-A, наприклад, включає сім'ю Cortex-A/A50, яка має кілька функцій, таких як підтримка управління пам'яттю, висока продуктивність при низькому енергоспоживанні, що залежить від багатозадачності, яку виконує операційна система. По-друге, профіль реального часу, який потрібен вбудованим системам. Він реалізований в ARMv7-R, наприклад, включає сім'ю Cortex-R. Він має функції, такі як захищена пам'ять та низька латентність і передбачуваність потреб у "реальному часі". По-третє, профіль мікроконтролера реалізований в ARMv7-M, наприклад, включає сім'ю Cortex-M. У нього є функції, такі як глибоке вбудоване використання, найнижча точка входу у ворота та детермінована / передбачувана поведінка як ключовий елемент.

Набори інструкцій

Для архітектури ARM Halfword означає 16 біт (два байти), Word - 32 біти (чотири байти), а Doubleword - 64 біти (вісім байтів). Більшість архітектур ARM реалізують два набори інструкцій: 32-бітний набір інструкцій ARM і 16-бітний набір інструкцій Thumb. Найновіші ядра ARM, такі як ARMv8-A, включаючи сім'ю Cortex-A, вводять новий набір інструкцій під назвою Thumb-2. Він надає суміш 32-бітних і 16-бітних інструкцій. Крім того, деякі нові ядра ARM, такі як Cortex-A57, підтримують 64-бітні інструкції. Вони зберігають щільність коду зі збільшеною гнучкістю. Ядра Jazelle-DBX також можуть виконувати Java bytecode. Для набору інструкцій ARM всі інструкції мають довжину 32 біти, і вони підтримують багато виконань за один цикл. Щодо Thumb, це 16-бітний набір інструкцій, який використовується для оптимізації щільності коду з C-коду (65% розміру коду ARM) для покращення продуктивності вузької пам'яті. Він спрямований на генерацію компіляторів, тому він незалежний від ручного кодування. Щодо Thumb-2, він розроблений для збереження продуктивності ARM та поєднання її з щільністю коду Thumb. Окрім 16-бітного набору інструкцій, він додає 32-бітний набір інструкцій для реалізації майже всіх функцій ARM.

Для обробки даних доступні операції в архітектурі ARM у Cortex-A8:

Арифметичні: ADD ADC SUB SBC RSB RSC

Логічні: AND ORR EOR BIC

Порівняння: CMP CMN TST TEQ

Пересування даних: MOV MVN

Вони взаємодіють тільки з регістром, тобто не працюють з пам'яттю. Другий операнд в ARM використовує додатковий регістр, зазначений Barrel Shifter, перед ALU.

Режими процесора

ARM має сім основних режимів роботи:


Користувач : непривілейований режим, в якому виконується більшість завдань
FIQ : вводиться при виникненні високопріоритетного (швидкого) переривання
IRQ : вводиться при виникненні переривання низького пріоритету (звичайного)
Супервізор : вводиться при скиданні та виконанні інструкції Software Interrupt
Аварійна зупинка : використовується для обробки порушень доступу до пам'яті
Невизначений : використовується для обробки невизначених інструкцій
Система : привілейований режим, що використовує ті ж регістри, що і режим користувача
Монітор : безпечний режим для TrustZone.

Набір реєстрів ARM

У ARM є 37 реєстрів, кожен з яких має довжину 32 біти. Реєстри R0-R7 однакові для всіх режимів ЦП; вони ніколи не є банкованими. Реєстри R8-R12 однакові для всіх режимів ЦП, за винятком режиму FIQ. У режимі FIQ є свої власні реєстри R8-R12.

R13 і R14 є банкованими для всіх привілейованих режимів ЦП, за винятком режиму системи. Тобто кожен режим, в який можна потрапити через виключення, має свої власні R13 і R14. Ці реєстри, як правило, містять вказівник стеку та адресу повернення від викликів функцій відповідно.

R13 також називається SP, вказівник стеку, R14 також називається LR, вказівник посилання, а R15 також називається PC, лічильник програм.

Регістр стану програми має наступні 32 біти.

scss

M (біти 0–4) - біти режиму процесора.
T (біт 5) - біт стану Thumb.
F (біт 6) - біт вимкнення FIQ.
I (біт 7) - біт вимкнення IRQ.
A (біт 8) - біт вимкнення нечіткої данихної виправдованості.
E (біт 9) - біт порядку байтів даних.
IT (біти 10–15 і 25–26) - біти стану if-then.
GE (біти 16–19) - біти більше або рівно.
DNM (біти 20–23) - біти "не змінювати".
J (біт 24) - біт стану Java.
Q (біт 27) - липкий біт переповнення.
V (біт 28) - біт переповнення.
C (біт 29) - біт переносу / позики / розширення.
Z (біт 30) - біт нуля.
N (біт 31) - біт негативного / менше.

Обробка виключень

Коли виникає виключення, ARM:


Копіює CPSR в SPSR_<mode>
Встановлює відповідні біти CPSR
Перейти в режим ARM
Перейти в режим виключення
Вимкнути переривання (якщо це відповідно)
Зберігає адресу повернення в LR_<mode>
Встановлює PC на адресу вектора

Для повернення обробника виключень потрібно:

Відновити CPSR з SPSR_<mode>
Відновити PC з LR_<mode>

Конвеєр інструкцій

ARM7TDMI використовує трьоступеневий конвеєр для збільшення швидкості потоку інструкцій до процесора. Це дозволяє виконувати кілька операцій одночасно. FETCH - це перший етап конвеєра, де інструкція отримується з пам'яті. Потім DECODE - це розшифрування використаних регістрів у інструкції. Нарешті, EXECUTE - це операції читання регістрів з банку реєстрів Shift та операції ALU та запис реєстрів назад у банк реєстрів.

Висновок

Архітектура ARM - одна з найбільш перспективних технологій, яку повинен знати кожен комп'ютерний вчений. Вона використовується всюди навколо нас. У цьому виступі ми сфокусувалися на сім'ї Cortex-A, яка є профілем застосування. Вона використовується в смартфонах через низьке енергоспоживання. Ми вибрали її через підтримку архітектур 32-біт та 64-біт, що є новим етапом в історії архітектури ARM. Це крок, який дозволив відомим компаніям, таким як Apple та Samsung, підтримувати 64-бітні операційні системи в своїх мобільних телефонах, а також 64-бітні операційні системи в Raspberry Pi для підвищення його використання в будівництві зелених дата-центрів.